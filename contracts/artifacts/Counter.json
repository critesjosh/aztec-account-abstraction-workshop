{
  "name": "Counter",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_counter",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_secret",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "increment",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "update_secret",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "new_secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzdl91OAjEQhd+l18R0Oj/t8CrGC6KYkBg0wh3Zd3dR2q4wdoOgWb0CktPhm7PT9uzOPT3fL7ar5/XGzXcO3fx25zYvi/X+12a7eN26uZ+55fqh/+xm7nH1tHRz6GYnKkBkPSj77wmKGpMlp+ApyynIiFyRD2JNWKQUuruZo78Izb8I3WsKNGr6PrRY0MBSPImRmuiBYu4xcKgk0SIRziSi3JYyy0HKMRapoCGl8gSJpUrf+4v/oD9OkKsiD/szJkMLbNQ6FXrmVKR/4JpQlkrko6nQyfanBRo/9ddDg58qdYoZQTG0n0ooVdHXqsG/NwhTbVCp7hU9fixhqtTgPWYGTyfjZCaDH+OOPnOnwWTbbjdOJjCjweSpzWxwFrVA1gZRGKEuF0YKlZosKaVsBvtKzWyNk0DuEATrNlAyZ49imb1BnjHFTesuTyg/ZB1DsU5827og2QyEgdSibXpxeZo5xwvF7IUOImbvxR7l8ojwPZT9oXbEIjfmjISU71LE41goN6aV7SVmy+0lZtBoLVH7X8iHHHGpWvVxkKv9L+0ldpgYWWPezyNrzNsRy+FANBIYekEJ97U86KG8eYldr7x521yvvHktnFO+vDWSpNPy5ra4XnlzC12pPMQvNoKUFwCqJ6nE7q7r3gC6hPgH",
      "eJzM3d2OJk2alelzqe3WKJ4/s8f6VEazgWYYCQnBaGAPce4YUmVWIczbvO54o3Jt0ZRytTsRyy2/utzXx3/7y3/8z//3v/uv/+E//6f/8pd//W9/+fo/xl/+9f/8b3/5L//fv/tP//P//l/+67/7///rX/7161/+8u//0/+z/8///i9/+X//w3/893/5V/vv//K//SlPG/HXP7n/5zl//+k8/fH9B3794a+//S+O+u//17/s+5gi99Ei97FE7sO+VG7EVG7EVW4kVG4kVW6kVG5E5Vg1lXPVVA5WUzlZXeVkdZWT1VVOVlc5WV3lZHWVk9VVTlZXOVld5WR1lZM1VE7WUDlZQ+VkDZWTNVRO1lA5WUPlZA2VkzVUTtZQOVlT5WRNlZM1VU7WVDlZU+VkTZWTNVVO1lQ5WVPlZE2Vk7VUTtZSOVlL5WQtlZO1VE7WUjlZS+VkLZWTtVRO1lI5WYfKyTpUTtahcrIOlZN1qJysQ+VkHSon61A5WYfKyTpUTtapcrJOlZN1qpysU+VknSon61Q5WafKyTpVTtapcrJOlZO1VU7WVjlZW+VkbZWTtVVO1lY5WVvlZG2Vk7VVTtZWOVmXysm6VE7WpXKyLpWTdamcrEvlZF0qJ+tSOVmXysm6VE5W+1I5Wu1L5Wy1L5XD1b5UTlf7Ujle7UvlfLUvlQPWvlROWPtSOWLtS+aMFZpjyZyxOoMsnUWWziRLZ5OlM8rSWWXpzLJkdlkmM8wymWWWyUyzTGabZTLjLJNZZ5nMPMtk9lkmM9AymYWWyUy0TGajZTIjLZNZaZnMTMtkdlomM9QymaWWyUy1TGarZTJjLZNZa5nMXMtk9lomM9gymcWWyUy2TGazZTKjLZNZbZnMbMtkdlsmM9wymeWWyUy3TGa7ZTLjLZNZb5nMfMtk9lsmM+AymQWXyUy4TGbDZTIjLpNZcZnMjMtkdlwmM+QymSWXyUy5TGbLZTJjLpNZc5nMnMtk9lwmM+gymUWXyUy6TGbTZTKjLpNZdZnMrMtkdl0mM+wymWWXyUy7TGbbZTLjLpNZd5nMvMtk9l0mM/AymYWXyUy8TGbjZTIjL5NZeZnMzMtkdl4us/NymZ2Xy+y8XGbn5V8qZ6zL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z83KZnZfL7LxcZuflMjsvl9l5uczOy2V2Xi6z8wqZnVfI7LxCZucVMjuv+FI5Y0Nm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8jsvEJm5xUyO6+Q2XmFzM4rZHZeIbPzCpmdV8rsvFJm55UyO6+U2Xnll8oZmzI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8UmbnlTI7r5TZeaXMzitldl4ps/NKmZ1Xyuy8SmbnVTI7r5LZeZXMzqu+VM7Yktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZudVMjuvktl5lczOq2R2XiWz8yqZnVfJ7LxKZuc1ZHZeQ2bnNWR2XkNm5zW+VM7YIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/MaMjuvIbPzGjI7ryGz8xoyO68hs/OaMjuvKbPzmjI7rymz85pfKmfslNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2XlNmZ3XlNl5TZmd15TZeU2ZndeU2Xm1zM6rZXZeLbPzapmdV3+pnLEts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzqtldl4ts/NqmZ1Xy+y8Wmbn1TI7r5bZebXMzmvJ7LyWzM5ryey8lszOa32pnLFLZue1ZHZeS2bntWR2Xktm57Vkdl5LZue1ZHZeS2bntWR2Xktm57Vkdl5LZue1ZHZeS2bntWR2Xktm57Vkdl5LZue1ZHZeS2bntWR2Xktm57Vkdl5LZue1ZHZeS2bntb6389r/K3/fiVt+706+dcZ+9E6+dcZ+9E6+dcZ+9E6+dcZ+9E6+dcZ+9E6+dcZ+9E6+dcZ+8k6+t/P66J1864z96J3InLHf23l99E5kztjv7bw+eicyZ+z3dl4fvROZM/Z7O69P3sn3dl4fvROZM/Z7O6+P3onMGfu9nddH70TmjP3ezuujdyJzxn5v5/XRO5E5Y7+38/roncicsd/beX30TmTO2O/tvD56JzJn7Pd2Xh+9E5kz9ns7r4/eicwZ+72d10fvROaM/d7O66N3InPGfm/n9dE7kTljv7fz+uidyJyx39t5ffROZM7Y7+28PnonMmfs93ZeH70TmTP2ezuvj96JzBn7vZ3XR+9E5oz93s7ro3cic8Z+b+f10TuROWO/t/P66J3InLHf23l99E5kztjv7bw+eicyZ+z3dl4fvROVM9a+vjf0+uytqJyy+1ZUjtl9Kyrn7L4VlYN234rKSbtvReWo3beictbuW1E5bPet6Jy235t8ffZWdE7b742+PnsrOqft92Zfn70VndP2e8Ovz96Kzmn7venXZ29F57T93vjrs7eic9p+b/712VvROW2/NwD77K3onLbfm4B99lZ0TtvvjcA+eys6p+33ZmCfvRWd01ZmCLZvRee0lZmC7VvROW1lxmD7VnROW5k52L4VndNWZhC2b0XntJWZhO1b0TltZUZh+1Z0TluZWdi+FZ3TVmYYtm9F57SVmYbtW9E5bWXGYftWdE5bmXnYvhWd01ZmILZvRee0lZmI7VvROW1lRmL7VnROW5mZ2L4VndNWZii2b0XntJWZiu1b0TltZcZi+1Z0TluZudi+FZ3TVmYwtm9F57SVmYztW9E5bWVGY/tWdE5bmdnYvhWd01ZmOLZvRee0lZmO7VvROW1lxmP7VnROW5n52L4VndNWZkC2b0XntJWZkO1b0TltZUZk+1Z0TluZGdm+FZ3TVmZItm9F57SVmZLtW5E5bU1nS2Y6WzLT2ZKZzpbMvmROW9PZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdLZjpbMtPZkpnOlsx0tmSmsyUznS2Z6WzJTGdL5jpbMtfZkrnOlsx1tmT+JXPaus6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOlsy19mSuc6WzHW2ZK6zJXOdLZnrbMlcZ0vmOluy0NmShc6WLHS2ZKGzJYsvmdM2dLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKFzpYsdLZkobMlC50tWehsyUJnSxY6W7LQ2ZKlzpYsdbZkqbMlS50tWX7JnLapsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlix1tmSpsyVLnS1Z6mzJUmdLljpbstTZkqXOlqx0tmSlsyUrnS1Z6WzJ6kvmtC2dLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZKWzJSudLVnpbMlKZ0tWOluy0tmSlc6WrHS2ZENnSzZ0tmRDZ0s2dLZk40vmtB06W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqGzJRs6W7KhsyUbOluyobMlGzpbsqmzJZs6W7KpsyWbOluy+SVz2k6dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2dLdnU2ZJNnS3Z1NmSTZ0t2dTZkk2d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azB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0Gs9dg9hrMXoPZazB7DWavwew1mL0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazJ7TWavyew1mb0ms9dk9prMXpPZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0Ws9di9lrMXovZazF7LWavxey1mL0OZq+D2etg9jqYvQ5mr4PZ62D2Opi9Dmavg9nrYPY6mL0OZq+D2etg9jqYvQ5mr4PZ62D2Opi9Dmavg9nrYPY6mL0OZq+D2etg9jqYvQ5mr4PZ62D2Opi9Dmavg9nrYPY6mL0OZq+D2etg9jqYvQ5m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yEUduagjF3Xkoo5c1JGLOnJRRy7qyEUduagjF3Xkoo5c1JGLOnJRRy7qyEUduagjFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRQC4ayEUDuWggFw3kooFcNJCLBnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiF03koolcNJGLJnLRRC6ayEUTuWgiFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghF62zOmasv6Yyv06p40/+mjr+5K+p40/+mjr+5K+p40/+mjr+5G+pszpeU8en8po6PpXX1Lkb/Su1/7o/pc7duKXO3bilzt24pc7duKXO3bilzt24pM7qeE2du3FLnbtxS6FunNXxmkLdOKvjNYW6cVbHawp146yO19StG+F/n/qX//0vEv/66x91t7/9Uf99gVuNvn2BW+O+fYFbOb99gVuPv32BW+W/fYHb0/HtC9wepG9f4PbMffcCZ/j95AV++kk+c/InL/DTT/IZqT95gZ9+ks/0/ckL/PSTfAb1T17gp5/kM9N/8gI//SSf8f+TF/jpJ/n8SuGTF/jpJ/n8ouKTF/jpJ/n8+uOTF/jhJ3mcX6p88gI//CSP86uaT17gh5/k8fXDT/I4vyv65AV++Eke5zdQn7zADz/J4/xe64MXOL8C++QFfvpJPr9Y++QFfvpJPr+u++QFfvpJPr8E/OQFfvpJPr9a/OQFfvpJPr+w/OQFfvpJPr8G/eQFfvpJPr9c/eQFfvpJPr+y/eQFfvpJPr8I/uQFfvpJPr9e/uQFfvpJPr+0/uQFfvpJPr8K/+QFfvpJPr9g/+QFfvpJPr+2/+QFfvpJPo+kPnmBn36Sz9OrT17gp5/kh08rPniBn36SHz7Y+OAFfvpJfvgM5IMX+Okn+eHjkg9e4Kef5IdPVj54gZ9+kq8fwnz7Aj/9JF8/r/n2BX76Sb5+tPPtC/z0k3z9FOjbF/jpJ/n6gdG3L/DTT/L1s6VvX+Cnn+Trx1DfvsBPP8nXT6y+fYGffpKvH259+wI//ST/9Dde46e/8Ro//Y3X+OlvvMZPf+M1fvobr/HT33iNn/7Ga/z0N17jp7/xGj/9jdf46W+8xk9/4zV++huv8dPfeI2f/sZr/PQ3XuOnv/EaP/2N1zh/41WVvy4wD6uccf5w65o6PnPX1PFBuqaOT8c1daz8NXXs8TV1LOc1dWzcJTXPHxhdU6Qb8/wp0DVFujG/SDfm+Uuca4p0Y56/mbmmSDfm+euWW+r8yco1hbpx/rjkmkLdOH8Gck2hbpw/2LimUDfOn1ZcU6gb548grinUjfPnCtcU6sb5w4JrCnXj/AnANYW6cX5Zf02hbpxfq19TqBvnF+DXFOrG+VX1NYW6cX6pfE2hbpxf/15TqBvnF7XXFOrG+ZXqNYW6cX75eU2hbpxfU15TqBvnF4rXFOrG+dXfNYW6cX5Jd02hbpxfp11TqBvnF1/XFOrG+RXVNYW6cX6ZdE2hbpxf+1xTqBvnFzTXFOrG+VXKNYW6cX7pcU2hbpxfT1xTqBvnFwnXFOrGmfyvKdSNM85fU6gbZ0a/plA3zuB9TaFunGn6mkLdOCPyNYW6cebeawp14wyz1xTqxplQrynUDeSiE7noRC46kYtO5KITuehELjqRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7loIxdt5KKNXLSRizZy0UYu2shFG7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KILuehCLrqQiy7kogu56EIuupCLLuSiC7noQi66kIsu5KKLuGh+ERfdKdCNnQLd2CnQjZ0C3dgp0I2dAt3YKdCNnQLd2CnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTqBvERXcKdYO46E6hbhAX3SnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTqBvERXcKdYO46E6hbhAX3SnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTqBvERXcKdYO46E6hbhAX3SnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTqBvERXcKdYO46E6hbhAX3SnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTqBvERXcKdYO46E6hbhAX3SnUDeKiO4W6QVx0p1A3iIvuFOoGcdGdQt0gLrpTpBuGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMuashFDbmoIRc15KKGXNSQixpyUUMu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKOXNSRizpyUUcu6shFHbmoIxd15KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAuGshFA7loIBcN5KKBXDSQiwZy0UAumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKJXDSRiyZy0UQumshFE7loIhdN5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuWshFC7loIRct5KKFXLSQixZy0UIuOpCLDuSiA7noQC46kIsO5KIDuehALjqQiw7kogO56EAuOpCLDuSiA7noQC46kIsO5KIDuehALjqQiw7kogO56EAuOpCLDuSiA7noQC46zuo4Kv6aGjVOqeNP/po6/jRm219Tc61T6vjTuKaOP41b6qxzf0v11zF1/Bn2+J1afkodf4bX1LG919SxvdfU8fd1TR1/X9fU8ffV4b9TcUodT7Zr6niy3VJnnbumzt24pc7duKXO3bilzt24pc7duKXO3bilUDfOOndNoW6cde6aQt0469w1hbpx1rlrCnXjrHPXFOrGWeeuKdSNs85dU6gbZ527plA3zjp3TaFunHXumkLdOOvcNYW6cda5awp146xz1xTqxlnnrinUjbPOXVOoG2edu6ZQN846d02hbpx17ppC3Tjr3DWFunHWuWsKdeOsc9cU6cY869w1Rboxzzp3TZFuzLPOXVOkG/Osc9cU6cY869w1hbpx1rlrCnXjrHPXFOrGWeeuKdSNs85dU6gbZ527plA3zjp3TaFunHXumkLdOOvcNYW6cda5awp14/zV4jWFunH+avGaQt04++E1hbpx/mrxmkLdOFvlNYW6cf5q8ZpC3Ti76DWFuvHgorcU6saDi95SqBsPLnpLoW4gF53IRSdy0YlcdCIXnchFJ3LRiVx0IhedyEUnctGJXHQiF53IRSdy0YlcdCIXnchFJ3LRiVx0IhedyEUnctGJXHQiF53IRSdy0YlcdCIXnchFJ3LRiVx0IhedyEUnctGJXHQiF53IRSdy0YlcdCIXnchFJ3LRiVx0IhedyEUnctGJXHQiF53IRSdy0Ylc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fHfnYF+Y7+4c7Avz3Z2DfWG+u3OwL8x3dw72hfnuzsG+MN/dOdYXg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D3/Wzm1ZW/zVX9VW/c7l+546/hxe54+/hnju76Yvc8ffwInf8PbzIHX8PL3LH5/ZF7vjcvsgdn9sXOdiXs5u+yMG+nN30RQ725eymL3KwL2c3fZGDfTm76Ysc7MvZTV/kYF/ObvoiB/tydtMXOdiXs5u+yMG+nN30RQ725eymL3KwL2c3fZGDfTm76Ysc7MvZTV/kYF/ObvoiB/tydtMXOdiXs5u+yMG+nN30RQ725eymL3KwL2c3fZGDfTm76Ysc7MvZTV/kYF/ObvoiB/tydtMXOdiXs5u+yMG+nN30RQ725eymL3KwL2c3fZGDfTm76Ysc7MvZTV/kYF/Obvoix/oSZzd9kWN9ibObvsixvsTZTV/kWF/i7KYvcqwvcXbTFznYl7ObvsjBvpzd9EUO9uXspi9ysC9nN32Rg305u+mLHOzL2U1f5GBfzm76Igf7cv4u9kUO9uX8XeyLHOwL9N2AvhvQdwP6bkDfDei7AX03oO8G9N2AvhsPvjvy1/uH//mvLj7lzn255h5895479+WeO/flnjv35Z479+WeO/flnjv35Z479+Weg3158N1r7sF37znYlwffvedgXx58956DfXnw3XsO9uXBd+852JcH373nYF8efPeeg3158N17DvblwXfvOdiXB9+952BfHnz3noN9efDdew725cF37znYlwffvedgXx58956DfXnw3XsO9uXBd+85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vrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOwL892dg31hvrtzsC/Md3cO9oX57s7BvjDf3TnYF+a7Owf7wnx352BfmO/uHOuLQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7xr0XYO+a9B3DfquQd816LsGfdeg7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfquQ9916LsOfdeh7zr0XYe+69B3HfpuQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb03YC+G9B3A/puQN8N6LsBfTeg7wb0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",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "contract Counter {\n\n    /*\n        Imports\n    */\n\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        state_vars::{\n            map::Map,\n            singleton::Singleton,\n        },\n        oracle::debug_log::{\n            debug_log,\n            debug_log_field,\n            debug_log_format\n        }\n    };\n    use dep::value_note::{\n            balance_utils,\n            value_note::{\n                ValueNoteMethods,\n                VALUE_NOTE_LEN,\n            },\n    };\n    use dep::field_note::field_note::{\n        FieldNote,\n        FieldNoteMethods,\n        FIELD_NOTE_LEN\n    };\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n    use dep::std::option::Option;\n\n    /*\n        Storage declaration\n    */\n\n    struct Storage {\n        // Whoever can produce this secret is able to \n        secret: Singleton<FieldNote, FIELD_NOTE_LEN>,\n        counters: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                secret: Singleton::new(context, 1, FieldNoteMethods),\n                counters: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        EasyPrivateUint::new(context, slot)\n                    },\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(secret: Field) {\n        let mut note = FieldNote::new(secret);\n        storage.secret.initialize(\n            &mut note,\n            Option::some(context.this_address()), // owner of the note, this is `this` bc the contract is being used as an \"account\"\n            false\n        );\n    }\n\n    #[aztec(private)]\n    fn increment(owner: Field, secret: Field)  {\n        let secret_note = storage.secret.get_note(false);\n        assert(secret_note.value == secret);\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner);\n    }\n\n    #[aztec(private)]\n    fn update_secret(secret: Field, new_secret: Field) {\n        assert(storage.secret.get_note(false).value == secret);\n        let mut note = FieldNote::new(new_secret);\n        storage.secret.replace(&mut note, false);\n        debug_log_format(\"secret: {0}, newSecret: {1}\", [secret, new_secret]);\n    }\n\n    unconstrained fn get_secret() -> Field {\n        let secret_note = storage.secret.view_note();\n        debug_log_format(\"secret: {0}\", [secret_note.value]);\n        secret_note.value\n    }\n\n    unconstrained fn get_counter(owner: Field) -> Field {\n        let counters = storage.counters;\n        balance_utils::get_balance(counters.at(owner).set)\n    }\n\n    /*\n        Required functions, only modified for custom note types\n    */\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        preimage: [Field; VALUE_NOTE_LEN],\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        if (storage_slot == 1) {\n            note_utils::compute_note_hash_and_nullifier(FieldNoteMethods, note_header, preimage)\n        } else {\n            note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n        }\n    }\n}",
        "path": "/home/josh/Documents/GitHub/aztec-account-abstraction-workshop/contracts/counter/src/main.nr"
      },
      "19": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "20": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "39": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "41": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "42": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "43": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "48": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/aztec/note/lifecycle.nr"
      },
      "49": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/aztec/note/note_getter.nr"
      },
      "51": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "55": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    serialized_note: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "60": {
        "source": "// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nfn debug_log_oracle<T, N>(_msg: T, _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_format_oracle<T, N>(_msg: T, _args: [Field; N], _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_field_oracle(_field: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_array_oracle<T, N>(_arbitrary_array: [T;N]) -> Field {}\n#[oracle(debugLogWithPrefix)]\nfn debug_log_array_with_prefix_oracle<S, T, N>(_prefix: S, _arbitrary_array: [T;N]) -> Field {}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<T>(msg: T) {\n    assert(debug_log_oracle(msg, 0) == 0);\n}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\nunconstrained pub fn debug_log_format<T, N>(msg: T, args: [Field; N]) {\n    assert(debug_log_format_oracle(msg, args, args.len()) == 0);\n}\n\n/// Example:\n/// `debug_log_field(my_field);`\nunconstrained pub fn debug_log_field(field: Field) {\n    assert(debug_log_field_oracle(field) == 0);\n}\n\n/// Example:\n/// `debug_log_array(my_array);`\nunconstrained fn debug_log_array<T, N>(arbitrary_array: [T; N]) {\n    assert(debug_log_array_oracle(arbitrary_array) == 0);\n}\n\n/// Example:\n/// `debug_log_array_with_prefix(\"Prefix\", my_array);`\nunconstrained pub fn debug_log_array_with_prefix<S, T, N>(prefix: S, arbitrary_array: [T; N]) {\n    assert(debug_log_array_with_prefix_oracle(prefix, arbitrary_array) == 0);\n}\n",
        "path": "/aztec/oracle/debug_log.nr"
      },
      "62": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "63": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "64": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "67": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/aztec/oracle/notes.nr"
      },
      "69": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/aztec/oracle/logs.nr"
      },
      "75": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "77": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "78": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "82": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/aztec/types/vec.nr"
      },
      "88": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained pub fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained pub fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    // docs:end:view_notes\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
        "path": "/value_note/balance_utils.nr"
      },
      "92": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "93": {
        "source": "use dep::aztec::{\n    context::Context,\n    note::note_getter_options::NoteGetterOptions,\n    state_vars::set::Set,\n};\nuse dep::value_note::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n};\n\nstruct EasyPrivateUint {\n    context: Context,\n    set: Set<ValueNote, VALUE_NOTE_LEN>,\n    storage_slot: Field,\n}\n\nimpl EasyPrivateUint {\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = Set {\n            context,\n            storage_slot,\n            note_interface: ValueNoteMethods,\n        };\n        EasyPrivateUint {\n            context,\n            set,\n            storage_slot,\n        }\n    }\n\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u120, owner: Field) {\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note, true);\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u120, owner: Field) {\n        // docs:start:get_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let maybe_notes = self.set.get_notes(options);\n        // docs:end:get_notes\n\n        let mut minuend: u120 = 0;\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n\n                // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n                // spending someone else's notes).\n                assert(note.owner == owner);\n\n                // Removes the note from the owner's set of notes.\n                // docs:start:remove\n                self.set.remove(note);\n                // docs:end:remove\n\n                minuend += note.value as u120;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(&mut result_note, result_value != 0);\n    }\n}\n",
        "path": "/easy_private_state/easy_private_state.nr"
      },
      "94": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal FIELD_NOTE_LEN: Field = 1;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform serialized_note\n// attack on it.\nstruct FieldNote {\n    value: Field,\n    header: NoteHeader,\n}\n\nimpl FieldNote {\n    pub fn new(value: Field) -> Self {\n        FieldNote {\n            value,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; FIELD_NOTE_LEN]{\n        [self.value]\n    }\n\n    pub fn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> Self {\n        FieldNote {\n            value: serialized_note[0],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(), 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(serialized_note: [Field; FIELD_NOTE_LEN]) -> FieldNote {\n    FieldNote::deserialize(serialized_note)\n}\n\nfn serialize(note: FieldNote) -> [Field; FIELD_NOTE_LEN]{\n    note.serialize()\n}\n\nfn compute_note_hash(note: FieldNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: FieldNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: FieldNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut FieldNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: FieldNote) {\n    assert(false, \"FieldNote does not support broadcast. Add it to PXE directly using the `.addNote` function.\");\n}\n\nglobal FieldNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/field_note/field_note.nr"
      }
    }
  },
  "aztecNrVersion": "aztec-packages-v0.14.2"
}